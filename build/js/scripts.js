"use strict";define("InstagramCollection",["backbone","ItemModelInstagram","EventMediator","ItemCollection"],function(Backbone,ItemModelInstagram,EventMediator,ItemCollection){return ItemCollection.extend({model:ItemModelInstagram,url:"/api/instagram",initialize(models,options){this.attributeSet({bounds:options.bounds,timeout:!1,scrollTo:void 0,clusters:[],allModels:{},params:{lat:options.bounds.center.lat,lng:options.bounds.center.lng},settings:{hide:!1,pause:!1}}),this.fetchData(this.attributeGet("params"))},mapBoundsChange(data){this.attributeSet({bounds:data.bounds,clusters:data.clusters});const query={lat:data.bounds.center.lat,lng:data.bounds.center.lng},params=this.attributeGet("params");Math.abs(query.lat-params.lat)<1e-4&&Math.abs(query.lng-params.lng)<1e-4||ItemCollection.prototype.mapBoundsChange.apply(this,[query])},clear(){ItemCollection.prototype.clear.apply(this),EventMediator.emit("instagram-cleared",null)}})}),define("ItemCollection",["backbone","underscore","EventMediator"],function(Backbone,_,EventMediator){const ItemCollection=Backbone.Collection.extend({setSettings(settings){settings=Object.assign(this.attributeGet("settings"),settings),this.attributeSet("settings",settings),!0!==settings.hide&&!0!==settings.pause||this.forceHide()},clear(){this.attributeSet({scrollTo:void 0,allModels:{},clusters:[]}),this.each(model=>{model.hide()})},forceHide(){const allModels=this.attributeGet("allModels");Object.keys(allModels).forEach(id=>{allModels[id].hide()})},updateViews(){const settings=this.attributeGet("settings");if(!0===settings.hide||!0===settings.pause)return;const allModels=this.attributeGet("allModels");Object.keys(allModels).forEach(id_str=>{allModels[id_str].updateView()})},mapBoundsChange(query){this.attributeGet("settings").pause||(this.updateViews(),this.fetchData(query))},fetchData(query){if(this.attributeGet("timeout"))return;this.attributeSet("timeout",!0);let params=this.attributeGet("params");params=Object.assign(params,query),this.attributeSet("params",params),this.fetch({data:params,processData:!0,remove:!0,success:this.dataLoaded.bind(this),error:(collection,response)=>{throw new Error("ERROR FETCHING")}}),setTimeout(()=>{this.attributeSet("timeout",!1)},1e3)},dataLoaded(collection){const allModels=this.attributeGet("allModels"),settings=this.attributeGet("settings");collection.each(model=>{allModels[model.id_str]=model}),EventMediator.emit("collection-locations-loaded",{twitter:this.models});const trigger=!0!==settings.hide;this.attributeSet("newElements",this.models,trigger)},selectHover(id_str){const model=this.attributeGet("allModels")[id_str];EventMediator.emit("item-hover-request",model.get("latlng"))},mapClusterSelected(model){const settings=this.attributeGet("settings");!0!==settings.hide&&!0!==settings.pause&&this.attributeSet("scrollTo",model,!0)}});return ItemCollection.prototype.attributeGet=function(attribute){return this.attributes||(this.attributes={}),this.attributes[attribute]},ItemCollection.prototype.attributeSet=function(attribute,value,trigger){if(this.attributes||(this.attributes={}),null===attribute||"object"!=typeof attribute){if("string"==typeof attribute)return this.attributes[attribute]=value,void(void 0!==trigger&&typeof trigger==typeof!0&&!0===trigger&&this.trigger(`change:${attribute}`))}else{const attributes=attribute;Object.keys(attributes).forEach(attr=>{this.attributes[attr]=attributes[attr]})}},ItemCollection.prototype.set=function(items){if(!0===this.attributeGet("settings").pause)return;const allModels=this.attributeGet("allModels"),newItems=_.reject(items,item=>void 0!==allModels[item.id_str]);return Backbone.Collection.prototype.set.call(this,newItems)},ItemCollection}),define("TweetCollection",["backbone","ItemModelTweet","ItemCollection","EventMediator"],function(Backbone,ItemModelTweet,ItemCollection,EventMediator){return ItemCollection.extend({model:ItemModelTweet,url:"/api/tweets",boundsQueryToString(bounds){return`${bounds.center.lat},${bounds.center.lng},${miles=bounds.dist,69*miles}mi`;var miles},initialize(models,options){this.attributeSet({bounds:options.bounds,timeout:!1,scrollTo:void 0,clusters:[],allModels:{},params:{geocode:this.boundsQueryToString(options.bounds)},settings:{hide:!1,pause:!1}}),this.fetchData(this.attributeGet("params"))},mapBoundsChange(data){this.attributeSet({bounds:data.bounds,clusters:data.clusters});const query={geocode:this.boundsQueryToString(data.bounds)},oldGeocode=this.attributeGet("params").geocode;query.geocode!==oldGeocode&&ItemCollection.prototype.mapBoundsChange.apply(this,[query])},clear(){ItemCollection.prototype.clear.apply(this),EventMediator.emit("twitter-cleared",null)},setSearchValue(searchValue){let params=this.attributeGet("params");params=Object.assign(params,{q:searchValue}),this.attributeSet("params",params)},showIds(ids){const allModels=this.attributeGet("allModels");try{ids.forEach(id=>{allModels[id].show()})}catch(err){console.log(err),this.fetchData(this.attributeGet("params"))}}})}),define("EventMediator",["backbone"],function(Backbone){return function(){const events={"twitter-clear":[],"collection-locations-loaded":[],"map-center-request":[],"item-hover-request":[],"map-model-assign-locations":[],"map-bounds-changed":[],"map-clear-all":[],"full-screen-request":[],"minimize-screen-request":[],"panel-change":[]};return{listen:function(event,callback,obj){if(events[event]||(events[event]=[]),void 0===events[event])throw new Error("Event Not Recognized: "+event);return events[event].push({callback:callback,obj:obj}),this},emit:function(event,data){return!!events[event]&&(events[event].forEach(subscription=>{void 0!==subscription.callback&&subscription.callback.apply(subscription.obj,[data])}),this)}}}()}),define("ClusterModel",["gmaps","markerclustererplus"],function(gmaps,markerclustererplus){return function(map,markers,events){const cluster=new MarkerClusterer(map,markers,{zoomOnClick:!1,imagePath:"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",minimumClusterSize:1});return void 0!==events&&events.forEach(item=>{google.maps.event.addListener(cluster,item.listen,clusterItem=>{item.callback.apply(item.context,[clusterItem])})}),MarkerClusterer.prototype.clear=function(){this.clearMarkers(),this.clusters_=[],this.repaint()},cluster}}),define("GeolocationModel",["backbone","gmaps"],function(Backbone,EventMediator,gmaps){return Backbone.Model.extend({defaults:{params:{},latlng:{},timeout:!1,geocoder:new google.maps.Geocoder},parseUserInput(input){const splitInput=input.split(",");return isNaN(parseInt(splitInput[0],void 0))&&isNaN(parseInt(splitInput[1],void 0))?void this.fetchData(input):void this.parseLatLngLocation(splitInput)},parseLatLngLocation(splitInput){const lat=parseFloat(splitInput[0]),lng=parseFloat(splitInput[1]);this.set("latlng",{lat:lat,lng:lng})},fetchData(query){this.get("timeout")||(this.set("timeout",!0),this.get("geocoder").geocode({address:query},this.geocodeDataLoad.bind(this)),setTimeout(()=>{this.set("timeout",!1)},1e3))},geocodeDataLoad(results,status){if(status===google.maps.GeocoderStatus.OK){const lat=results[0].geometry.location.lat(),lng=results[0].geometry.location.lng();this.set("latlng",{lat:lat,lng:lng})}else console.log("Geocode was not successful for the following reason: "+status)}})}),define("ItemModel",["backbone"],function(Backbone){return Backbone.Model.extend({show(){this.changeVisible(!0),this.updateView()},hide(){this.changeVisible(!1),this.updateView()},changeVisible(value){this.set("visible",value)},updateView(){this.trigger("change:update")},getLink(){throw new Error("NEED TO IMPLMENT GET LINK")}})}),define("ItemModelInstagram",["backbone","ItemModel"],function(Backbone,ItemModel){return ItemModel.extend({defaults:{modelType:"instagram",selected:!1,visible:!1},initialize(data){this.set("latlng",{lat:data.lat,lng:data.lng}),this.id_str=data.id_str},getLink(){return this.get("thumbnail_src")}})}),define("ItemModelTweet",["backbone","ItemModel"],function(Backbone,ItemModel){return ItemModel.extend({defaults:{modelType:"twitter",selected:!1,visible:!1},initialize(data){this.id_str=data.id_str},getLink(){return`https://twitter.com/${this.get("username")}/status/${this.get("id_str")}`}})}),define("MapModel",["backbone","underscore","EventMediator","ClusterModel","MarkerModel"],function(Backbone,_,EventMediator,ClusterModel,MarkerModel){const PARSE_LAT_LNG=function(num){return parseInt(1e4*num,void 0)/1e4};return Backbone.Model.extend({defaults:{selected:void 0,mapParams:{}},initialize(data){this.map=new google.maps.Map(data.mapELE,{zoom:16,center:new google.maps.LatLng(PARSE_LAT_LNG(data.bounds.center.lat),PARSE_LAT_LNG(data.bounds.center.lng)),mapTypeId:google.maps.MapTypeId.ROADMAP,disableDefaultUI:!0}),this.clusters=new ClusterModel(this.map,[])},updateLocationMarker(latlng){this.clearCurrentLocationMarker();const markerParams={position:latlng,label:"",map:this.map};this.currentLocationMarker=new google.maps.Marker(markerParams)},clear(){this.clearCurrentLocationMarker(),this.clusters.clear()},clearCurrentLocationMarker(){void 0!==this.currentLocationMarker&&this.currentLocationMarker.setMap(null)},addLocations(locations){let subscriber,markers=[];for(subscriber in locations)locations.hasOwnProperty(subscriber)&&(markers=locations[subscriber].map(model=>new MarkerModel(model)));this.clusters.addMarkers(markers)},updateSelectedCluster(cluster){const lat=cluster.center_.lat(),lng=cluster.center_.lng(),markers=cluster.markers_;markers.forEach(marker=>{marker.model.show()}),this.set("selected",markers[0].model),this.updateLocationMarker({lat:lat,lng:lng})},updateBounds(){const bounds=this.map.getBounds(),center=this.map.getCenter(),clusters=this.clusters.getClusters(),lat=center.lat(),lng=center.lng(),latf=bounds.f.b,lngb=bounds.b.b,distLat=Math.abs(lat-latf),distLng=Math.abs(lng-lngb),params={bounds:{center:{lat:lat,lng:lng},dist:Math.max(distLat,distLng)},clusters:clusters};let cluster;for(cluster of clusters){let marker;for(marker of cluster.markers_)marker.model.changeVisible(!0)}this.set("mapParams",params)}})}),define("MarkerModel",["gmaps"],function(gmaps){return function(model){const latlng=model.get("latlng"),marker=new google.maps.Marker({position:{lat:latlng.lat,lng:latlng.lng},label:model.id_str});return marker.model=model,marker}}),define("PopupModel",["backbone","gmaps"],function(Backbone,gmaps){return Backbone.Model.extend({defaults:{markers:[],index:0,point:void 0,marker:void 0,previous:!1,next:!1},populate(cluster){this.set(this.defaults,{silent:!0});const point=this.fromLatLngToPoint(cluster.getCenter(),cluster.getMap()),markers=cluster.getMarkers(),next=markers.length>1;this.set({markers:markers,marker:markers[0],point:point,next:next})},next(){const markers=this.get("markers");let index=this.get("index"),next=!0;++index>=markers.length-1&&(next=!1),this.set({marker:markers[index],index:index,next:next,previous:!0})},previous(){const markers=this.get("markers");let index=this.get("index");let previous=!0;--index<=0&&(previous=!1),this.set({marker:markers[index],index:index,next:!0,previous:previous})},fromLatLngToPoint(latLng,map){const topRight=map.getProjection().fromLatLngToPoint(map.getBounds().getNorthEast()),bottomLeft=map.getProjection().fromLatLngToPoint(map.getBounds().getSouthWest()),scale=Math.pow(2,map.getZoom()),worldPoint=map.getProjection().fromLatLngToPoint(latLng);return new google.maps.Point((worldPoint.x-bottomLeft.x)*scale,(worldPoint.y-topRight.y)*scale)}})}),define("Router",["backbone","HomeView","EventMediator"],function(Backbone,HomeView,EventMediator){return Backbone.Router.extend({routes:{"location/:lat/:lng/:dist":"location"},initialize(options){this.homeView,this.homeViewHasRendered=!1,EventMediator.listen("map-bounds-changed",this.updateURL,this)},start(){this.homeViewHasRendered||(this.homeView=new HomeView({el:"#app-main",bounds:void 0}))},updateURL(data){const bounds=data.bounds,center=bounds.center,URLoptions=`location/${center.lat}/${center.lng}/${bounds.dist}`;this.navigate(URLoptions,{trigger:!1})},location(lat,lng,dist){this.homeViewHasRendered=!0;const bounds={center:{lat:parseFloat(lat),lng:parseFloat(lng)},dist:parseFloat(dist)};this.homeView=new HomeView({el:"#app-main",bounds:bounds})}})}),define("ScrollPopupModel",["backbone","gmaps"],function(Backbone,gmaps){return Backbone.Model.extend({defaults:{markers:[]},populate(cluster){this.set(this.defaults,{silent:!0});const markers=cluster.getMarkers();this.set({markers:markers})}})}),define(["backbone","HomeView","Router"],function(Backbone,HomeView,Router){return Backbone.View.extend({initialize(){const router=new Router;Backbone.history.start(),router.start()}})}),define("GeolocationView",["backbone","tpl!views/templates/geolocation_view.tpl","GeolocationModel","EventMediator"],function(Backbone,GeolocationViewTemplate,GeolocationModel,EventMediator){return Backbone.View.extend({events:{"click #map-button-search":"userLocationInput","click #screen-switch-button":"screenSwitch"},initialize(data){this.model=new GeolocationModel({}),this.html=GeolocationViewTemplate(),$(this.el).html(this.html),this.model.on("change:latlng",this.modelLocationLoaded.bind(this))},ForceMinimizedView(){$("#screen-switch-button").html("Full Screen"),$("#screen-switch-button").attr("data-url","full-screen-request"),EventMediator.emit("minimize-screen-request","minimize-screen-request")},screenSwitch(e){const request=$(e.target).attr("data-url");"full-screen-request"===request?($(e.target).html("Revert"),$(e.target).attr("data-url","minimize-screen-request")):($(e.target).html("Full Screen"),$(e.target).attr("data-url","full-screen-request")),EventMediator.emit(request,request)},userLocationInput(e){const input=$("#map-search-text").val();this.model.parseUserInput(input),EventMediator.emit("map-clear-all")},modelLocationLoaded(model,value){EventMediator.emit("map-center-request",value)}})}),define("HomeView",["backbone","tpl!views/templates/home_view.tpl","SingletonView","MapView","PanelViewTwitter","PanelViewInstagram","GeolocationView","EventMediator"],function(Backbone,HomeViewTemplate,SingletonView,MapView,PanelViewTwitter,PanelViewInstagram,GeolocationView,EventMediator){return new SingletonView(Backbone.View.extend({initialize(options){this.html=HomeViewTemplate(),this.$el.html(this.html);const bounds=void 0!==options.bounds?options.bounds:{center:{lat:42.9634,lng:-85.6681},dist:.015},geolocationView=(new PanelViewTwitter({el:"#panel-twitter",bounds:bounds}),new PanelViewInstagram({el:"#panel-instagram",bounds:bounds}),new GeolocationView({el:"#geolocation-view"})),mapView=new MapView({el:"#map-view",bounds:bounds});const setView=function(windowWidth){windowWidth<1250&&EventMediator.emit("full-screen-request","full-screen-request"),windowWidth>1250&&geolocationView.ForceMinimizedView()};setView($(window).width()),mapView.render(),window.onresize=(event=>{setView($(window).width()),mapView.resize()})},render(){return this}}))}),define("InstagramView",["backbone","tpl!views/templates/instagram_view.tpl"],function(Backbone,InstagramViewTemplate){return Backbone.View.extend({initialize(data){this.model=data.model,this.el=data.el,this.template=InstagramViewTemplate;const width=data.width||300,link=this.model.getLink();this.html=this.template({link:link,id_str:this.model.id_str,width:width,id:data.id})},render(){$(this.el).append(this.html)}})}),define("MapView",["backbone","MapModel","gmaps","PopupView","EventMediator","tpl!views/templates/map_view.tpl","ScrollPopupView"],function(Backbone,MapModel,gmaps,PopupView,EventMediator,MapViewTemplate,ScrollPopupView){return Backbone.View.extend({events:{"click #map-button-search":"userLocationInput"},initialize(data){this.$el.html(MapViewTemplate()),$("#map-map").css({width:$(window).width(),height:$(window).height()}),this.model=new MapModel({bounds:data.bounds,mapELE:document.getElementById("map")}),this.clusterView=new PopupView({el:"#panel-cluster"}),this.model.on("change:mapParams",(model,params)=>{EventMediator.emit("map-bounds-changed",params)}),this.model.map.addListener("bounds_changed",this.clusterView.empty.bind(this.clusterView)),this.model.map.addListener("click",this.clusterView.empty.bind(this.clusterView)),google.maps.event.addListener(this.model.clusters,"clusterclick",clusterItem=>{this.clusterView.populate.apply(this.clusterView,[clusterItem]),this.model.updateSelectedCluster.apply(this.model,[clusterItem]);const model=clusterItem.getMarkers()[0].model;EventMediator.emit("map-cluster-selected",model)}),google.maps.event.addListener(this.model.clusters,"clusteringend",clusterItem=>{this.model.updateBounds.apply(this.model)}),EventMediator.listen("twitter-clear",this.clear,this),EventMediator.listen("map-center-request",this.model.map.setCenter,this.model.map),EventMediator.listen("collection-locations-loaded",this.model.addLocations,this.model),EventMediator.listen("item-hover-request",this.model.updateLocationMarker,this.model),EventMediator.listen("map-clear-all",this.clear,this),EventMediator.listen("full-screen-request",this.setPopupView,this),EventMediator.listen("minimize-screen-request",this.setPopupView,this)},setPopupView(event){"full-screen-request"!==event?"minimize-screen-request"!==event||(this.clusterView=new PopupView({el:"#panel-cluster"})):this.clusterView=new ScrollPopupView({el:"#scroll-holder-map-items"})},resize(){this.clusterView.empty(),$("#map-map").css({width:$(window).width(),height:$(window).height()}),$("#map").css({width:$(window).width(),height:$(window).height()});const currCenter=this.model.map.getCenter();google.maps.event.trigger(this.model.map,"resize"),this.model.map.setCenter(currCenter)},clear(){this.model.clear()}})}),define("NavView",["backbone","underscore"],function(Backbone,_){return Backbone.View.extend({initialize(data){this.router=data.router;const template=_.template('\n        <ul>\n          <% _.each(Object.keys(routes), function(route){ %>\n              <li id="nav-<%= route %>" data-url="<%= route %>"><%= route %></li>\n          <% }); %>\n        </ul>\n      ');return this.$el.html(template({routes:this.router.routes})),this},events:{click:"onClick"},onClick(e){const $li=$(e.target);this.router.navigate($li.attr("data-url"),{trigger:!0})}})}),define("PanelHeadingView",["backbone","tpl!views/templates/panel_heading_view.tpl"],function(Backbone,PanelHeadingViewTemplate){return Backbone.View.extend({initialize(data){this.el=data.el,this.template=PanelHeadingViewTemplate,$(this.el).html(this.template({heading:data.heading,uniqueName:data.uniqueName}))},render(){return this}})}),define("PanelView",["backbone","PanelHeadingView","EventMediator","ScrollView","tpl!views/templates/panel_view.tpl"],function(Backbone,PanelHeadingView,EventMediator,ScrollView,PanelViewTemplate){return Backbone.View.extend({initialize(options){const titleId=`panel-${options.uniqueName}-title`,itemsId=`panel-${options.uniqueName}-items`;this.unique=options.uniqueName,this.inView=!0,this.template=PanelViewTemplate,this.$el.css({visibility:"visible"}),this.$el.html(this.template({titleId:titleId,itemsId:itemsId})),this.headingView=new PanelHeadingView({el:`#${titleId}`,heading:options.heading,uniqueName:options.uniqueName});const ScrollViewInit=new ScrollView(options.subView);this.scrollView=new ScrollViewInit({el:`#${itemsId}`,collection:this.collection}),this.collection.on("change:newElements",this.scrollView.render.bind(this.scrollView)),this.collection.on("change:scrollTo",this.scrollTo.bind(this)),EventMediator.listen("full-screen-request",this.hide,this),EventMediator.listen("minimize-screen-request",this.show,this),EventMediator.listen("map-clear-all",this.clear,this),EventMediator.listen("map-bounds-changed",this.collection.mapBoundsChange,this.collection),EventMediator.listen("map-cluster-selected",this.collection.mapClusterSelected,this.collection)},scrollTo(){const scrollToModel=this.collection.attributeGet("scrollTo");void 0!==scrollToModel&&this.uniqueName===scrollToModel.get("modelType")&&$(`#panel-${this.uniqueName}-items`).animate({scrollTop:$(`#panel-${this.uniqueName}-items`).scrollTop()+$(`#${this.uniqueName}-${scrollToModel.id_str}`).position().top},1e3)},render(){return this.scrollView.render(),this},clear(){EventMediator.emit("panel-change"),this.scrollView.clear(),this.collection.clear()},show(e){this.inView||(this.inView=!0,this.$el.attr("data-url","show"),this.showPanel({hide:!1}))},start(e){this.inView||(this.inView=!0,this.$el.attr("data-url","start"),this.showPanel({pause:!1}))},pause(e){if(!this.inView)return;this.$el.attr("data-url","pause"),this.inView=!1;const uniqueName=this.unique;this.hidePanel(`<button class="start-button" id="${uniqueName}-start" >Start</button>`,{pause:!0})},hide(e){if(!this.inView)return;this.$el.attr("data-url","hide"),this.inView=!1;const uniqueName=this.unique;this.hidePanel(`<button class="show-button" id="${uniqueName}-show" >Show</button>`,{hide:!0})},changeView(html,css,animation,callback,context,data){EventMediator.emit("panel-change"),this.$el.animate(animation.begin,200,()=>{this.$el.html(html),this.$el.css(css),this.$el.animate(animation.end,200,()=>{void 0!==callback&&callback.call(context,data)})})},empty(){this.$el.empty(),this.$el.css({visibility:"hidden"})}})}),define("PanelViewGram",["backbone","InstagramView","tpl!views/templates/panel_view_gram.tpl"],function(Backbone,InstagramView,PanelViewGramTemplate){return Backbone.View.extend({initialize(data){this.model=data.model,InstagramView.prototype.initialize.apply(this,[data]),this.el=data.el,this.visible=!1,this.superTemplate=PanelViewGramTemplate,this.html=this.superTemplate({id_str:this.model.id_str,instagramHtml:this.html,latlng:JSON.stringify(this.model.get("latlng"))}),this.elementId=`#instagram-${this.model.id_str}`,this.model.on("change:selected",this.selected.bind(this)),this.model.on("change:update",this.updateView.bind(this)),this.updateView()},selected(){$(this.elementId).removeClass("tweet-container-selected"),this.model.get("selected")&&$(this.elementId).addClass("tweet-container-selected")},updateView(){const modelVisible=this.model.get("visible");this.model.set("visible",!1),!0!==this.visible||!0!==modelVisible?!0===modelVisible?(this.visible=!0,$(this.el).append(this.html)):($(this.elementId).remove(),this.visible=!1):this.model.set("visible",!1)}})}),define("PanelViewInstagram",["backbone","PanelView","PanelViewGram","InstagramCollection","SingletonView","EventMediator","tpl!views/templates/panel_view_instagram.tpl"],function(Backbone,PanelView,PanelViewGram,InstagramCollection,SingletonView,EventMediator,PanelViewInstagramTemplate){return new SingletonView(PanelView.extend({events:{"mouseenter .instagram-container":"mouseHover","click #instagram-hide":"hide","click #instagram-show":"show","click #instagram-pause":"pause","click #instagram-start":"start"},initialize(options){this.collection=new InstagramCollection(null,{bounds:options.bounds}),options.uniqueName="instagram",options.subView=PanelViewGram,options.heading=PanelViewInstagramTemplate(),PanelView.prototype.initialize.apply(this,[options])},mouseHover(e){e.preventDefault();const id_str=$(e.currentTarget).attr("data-url");this.collection.selectHover(id_str)},showPanel(settings){this.collection.setSettings(settings);const html=this.holdHtml;this.changeView(html,{height:"95%",width:"330px"},{begin:{right:"-=500"},end:{right:"+=500"}})},hidePanel(newHtml,settings){this.holdHtml=$(this.el).html(),this.collection.setSettings(settings);this.changeView(newHtml,{height:"auto",width:"auto"},{begin:{right:"-=500"},end:{right:"+=500"}})}}))}),define("PanelViewTweet",["backbone","TweetView","EventMediator","tpl!views/templates/panel_view_tweet.tpl"],function(Backbone,TweetView,EventMediator,PanelViewTweetTemplate){return Backbone.View.extend({initialize(data){this.model=data.model,TweetView.prototype.initialize.apply(this,[data]),this.el=data.el,this.visible=!1,this.updating=!1,this.elementId=`#twitter-${this.model.id_str}`,this.superTemplate=PanelViewTweetTemplate,this.html=this.superTemplate({id_str:this.model.id_str,tweetHtml:this.html,latlng:JSON.stringify(this.model.get("latlng"))}),this.model.on("change:selected",this.selected.bind(this)),this.model.on("change:update",this.updateView.bind(this)),this.updateView()},selected(){$(this.elementId).removeClass("tweet-container-selected"),this.model.get("selected")&&$(this.elementId).addClass("tweet-container-selected")},updateView(){const modelVisible=this.model.get("visible");this.model.set("visible",!1),!0!==this.visible||!0!==modelVisible?!0===modelVisible?(this.visible=!0,$(this.el).append(this.html)):($(this.elementId).remove(),this.visible=!1):this.model.set("visible",!1)}})}),define("PanelViewTwitter",["backbone","tpl!views/templates/panel_view_twitter.tpl","PanelView","PanelViewTweet","TweetCollection","SingletonView","EventMediator"],function(Backbone,PanelViewTwitterTemplate,PanelView,PanelViewTweet,TweetCollection,SingletonView,EventMediator){return new SingletonView(PanelView.extend({events:{"click .button-go-to-tweet-location":"tweetLocationRequest","mouseenter .tweet-container":"tweetMouseHover","click #tweet-search-submit":"tweetSearch","click #twitter-hide":"hide","click #twitter-show":"show","click #twitter-pause":"pause","click #twitter-start":"start"},initialize(options){this.collection=new TweetCollection(null,{bounds:options.bounds}),this.removedIds=[],options.uniqueName="twitter",options.subView=PanelViewTweet,options.heading=PanelViewTwitterTemplate(),PanelView.prototype.initialize.apply(this,[options])},showPanel(settings){this.collection.setSettings(settings);this.changeView(this.holdHtml,{height:"95%",width:"330px"},{begin:{left:"-=500"},end:{left:"+=500"}},this.collection.showIds,this.collection,this.removedIds)},hidePanel(newHtml,settings){this.collectVisibleTweetIds(),this.collection.setSettings(settings),this.holdHtml=$(this.el).html();this.changeView(newHtml,{height:"auto",width:"auto"},{begin:{left:"-=500"},end:{left:"+=500"}})},collectVisibleTweetIds(){this.removedIds=[];const elementArray=$(this.el).find(".tweet-container");elementArray.each(index=>{const element=elementArray[index];this.removedIds.push($(element).attr("data-url"))})},tweetLocationRequest(e){e.preventDefault();const latlng=$(e.target).attr("data-url");EventMediator.emit("map-center-request",JSON.parse(latlng))},tweetSearch(e){e.preventDefault();const searchValue=$("#tweet-search-text").val();this.collection.setSearchValue(searchValue),this.clear()},tweetMouseHover(e){e.preventDefault();const id_str=$(e.currentTarget).attr("data-url");this.collection.selectHover(id_str)}}))}),define("PopupView",["backbone","tpl!views/templates/popup_view.tpl","PopupModel","TweetView","InstagramView","EventMediator"],function(Backbone,PopupViewTemplate,PopupModel,TweetView,InstagramView,EventMediator){const VIEW_TYPES={twitter:TweetView,instagram:InstagramView};return Backbone.View.extend({events:{"click #holder-title-previous":"previous","click #holder-title-next":"next"},initialize(data){this.subElement="#holder-map-items",this.model=new PopupModel({}),this.model.on("change:marker",this.render,this),EventMediator.listen("full-screen-request",this.empty,this)},render(){this.$el.html(PopupViewTemplate()),$(this.subElement).empty();const point=this.model.get("point"),previous=this.model.get("previous"),next=this.model.get("next");!0===(!previous&&!next)&&$("#holder-map-title").empty(),$("#holder-title-previous").prop("disabled",!previous),$("#holder-title-next").prop("disabled",!next),this.$el.css({left:point.x,top:point.y}),this.addItem(),this.$el.css({visibility:"visible"}),this.$el.css({"max-height":"calc(100% - "+point.y+"px)"}),$(this.subElement).css({"max-height":"calc(100% - "+point.y+"px)"})},addItem(model){const itemModel=this.model.get("marker").model,modelType=itemModel.get("modelType");new(0,VIEW_TYPES[modelType])({el:this.subElement,model:itemModel}).render()},empty(){this.$el.css({visibility:"hidden"}),$(this.subElement).empty()},populate(cluster){this.model.populate(cluster)},next(){this.model.next()},previous(){this.model.previous()}})}),define("ScrollPopupView",["backbone","tpl!views/templates/scroll_popup_view.tpl","ScrollPopupModel","TweetView","InstagramView","EventMediator"],function(Backbone,ScrollPopupViewTemplate,ScrollPopupModel,TweetView,InstagramView,EventMediator){const SELF_FLEX=["flex-start","flex-end","center","baseline","stretch"],VIEW_TYPES={twitter:TweetView,instagram:InstagramView};return Backbone.View.extend({events:{click:"empty"},initialize(data){this.model=new ScrollPopupModel({}),this.model.on("change:markers",this.render,this),EventMediator.listen("panel-change",this.empty,this),EventMediator.listen("minimize-screen-request",this.empty,this)},render(){const leftPanelData=$("#panel-twitter").attr("data-url"),rigthPanelData=$("#panel-instagram").attr("data-url"),leftPanelOpen="pause"===leftPanelData||"hide"===leftPanelData?0:330,rightPanelOpen="pause"===rigthPanelData||"hide"===rigthPanelData?0:330,left=leftPanelOpen,width=$(window).width()-(leftPanelOpen+rightPanelOpen);this.$el.empty(),this.$el.css({left:left,width:width,height:$(window).height()-80,"z-index":3});const markersClone=this.model.get("markers").slice(0);let i=0;for(;markersClone.length>0;){const marker=markersClone.splice(markersClone.length*Math.random()|0,1)[0],modelType=marker.model.get("modelType"),viewObject=VIEW_TYPES[modelType],randomWidth=200*Math.random()+200,id=`${i}-popup-container`;new viewObject({el:this.$el,model:marker.model,randomWidth:randomWidth,id:id}).render();const index=Math.round(4*Math.random()),flex=SELF_FLEX[index];$(`#${id}`).css("align-self",flex),i++}},empty(){this.$el.css({width:0,height:0,"z-index":0}),this.$el.empty()},populate(cluster){this.model.populate(cluster)}})}),define("ScrollView",["backbone"],function(Backbone){return function(viewObj){return Backbone.View.extend({initialize(data){this.collection=data.collection,this.el=data.el},clear(){$(this.el).empty()},render(){return this.collection.each(model=>{new viewObj({el:this.el,model:model})}),this}})}}),define("SingletonView",["backbone"],function(Backbone){return function(obj){let instance;return function(params){return void 0===instance&&(instance=new obj(params)),instance}}}),define("TweetView",["backbone","tpl!views/templates/tweet_view.tpl"],function(Backbone,TweetViewTemplate){return Backbone.View.extend({initialize(data){this.model=data.model,this.el=data.el,this.template=TweetViewTemplate;const link=this.model.getLink();this.html=this.template({link:link})},render(){$(this.el).append(this.html)}})});